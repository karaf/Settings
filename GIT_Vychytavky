#!/bin/bash

# Show status
git status
# Show tracked files
git ls-files

# Show the push/fetch targets
git remote show origin
cat .git/config


# Show the repository
git remote -v


# Reset to origin
git fetch --all
git reset --hard origin/master
git pull origin master

# restore a single file
git checkout origin/master filename

# Temporaly ignore changes for commit
git update-index --assume-unchanged $file
# Take it back
git update-index --no-assume-unchanged $file

# Create branch which will track remote branch
git checkout --track -b binbzha/latency-control-blstm origin/binbzha/latency-control-blstm

# Temporaly ignore changes for commit
git update-index --assume-unchanged $file
# Take it back
git update-index --no-assume-unchanged $file

# Delete branch
git push --delete origin $branch_name # delete remote
git branch -d $branch_name            # -d only if it is merged, -D behave as with --force, so do not care about merge

# conflict merge can be resolved
git mergetool

# Made patch from one commit
git format-patch -1 <sha>
# Apply patch # https://ariejan.net/2009/10/26/how-to-create-and-apply-a-patch-with-git/
git apply --stat   $patch_file
git apply --check  $patch_file
git am --signoff < $patch_file # or   git am -3 < $patch_file

# Create upstream and merge working branch into upstream
git remote -v # print number of remote streams
git remote add upstream  git@github.com:espnet/espnet.git # Add one more remote stream called "upstream"
git diff upstream/multilingual --name-status  # differences between current and "upstream"
git fetch upstream multilingual      # fetch changes from "upstream/multilingual"
git merge  upstream/multilingual     # merge with fetched
git push                             # put it into repository


# add other origin url
git remote add origin-https https://karafiat@git.fit.vutbr.cz/iveselyk/material_kaldi.git
git push origin-https martas


# slouceni commitu
git rebase -i HASH # s (squash) for merging
## kdyz se to posere
git rebase --abort


# Show all remote branches
git branch -r

# Create remote branch
git checkout -b branch_name # Create new branch a checkout there
git push -u origin branch_name # create upstream of current branch into origin/branch_name
git push -u origin HEAD     # more safe

# Change branch to master
git checkout master

# Save changes, pull and put them back
git stash
git pull
git stash pop
git stash list              # list of all stashes
git stash show              # show what is in last stash
git stash show -p stash@{1} # show what is stash@{1}


# git from different source
ssh -L 1234:10.12.117.96:22 gw.phonexia.com              # ssh tunel from local phx adress and port 10.12.117.96:22 to localhost:1234 through gw.phonexia.com (Odin)
                                                         # After clone: git clone git@localhost:1234/ASR-team/ASR-tools.git 

git clone ssh://git@localhost:1234/pulugundla/chain-5-gen.git  ./ # make a git repo

# remember login for defined time (default 15min)
git config --global credential.helper 'cache --timeout=36000'
